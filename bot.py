# -*- coding: utf-8 -*-
import logging
import json
import os
import time
import threading
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler,
)
import requests

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç—Å–∏—è–∏ –∞—Å–æ—Å”£ ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# =================================================================================
# +++ “ö–ò–°–ú–ò –¢–ê–ù–ó–ò–ú–û–¢–ò –ë–ï–•–ê–¢–ê–† +++
#
# –¢–æ–∫–µ–Ω –≤–∞ —Å—É—Ä–æ“ì–∞–∏ API –∞–∑ —Ç–∞“ì–∏—Ä—ë–±–∞–Ω–¥–∞“≥–æ–∏ –º—É“≥–∏—Ç–∏ —Å–∏—Å—Ç–µ–º–∞ –≥–∏—Ä–∏—Ñ—Ç–∞ –º–µ—à–∞–≤–∞–Ω–¥.
# –ò–Ω —É—Å—É–ª–∏ –±–µ—Ö–∞—Ç–∞—Ä –±–∞—Ä–æ–∏ “∑–æ–π–≥–∏—Ä–∫—É–Ω–∏–∏ –ª–æ–∏“≥–∞ –¥–∞—Ä –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∞—Å—Ç.
BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_TELEGRAM_ID = 7226492351 # ID-–∏ –∞–¥–º–∏–Ω—Ä–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –∏–Ω“∑–æ –≥—É–∑–æ—Ä–µ–¥

# –ê–≥–∞—Ä API_BASE_URL –¥–∞—Ä –º—É“≥–∏—Ç –º—É“õ–∞—Ä—Ä–∞—Ä –Ω–∞—à—É–¥–∞ –±–æ—à–∞–¥, —Å—É—Ä–æ“ì–∞–∏ –º–∞“≥–∞–ª–ª”£ (–±–∞—Ä–æ–∏ —Ç–µ—Å—Ç) –∏—Å—Ç–∏—Ñ–æ–¥–∞ –º–µ—à–∞–≤–∞–¥.
# –î–∞—Ä —Ö–æ—Å—Ç–∏–Ω–≥ —à—É–º–æ –±–æ—è–¥ —Å—É—Ä–æ“ì–∞–∏ –ø—É–±–ª–∏–∫–∏–∏ app.py-—Ä–æ –º—É“õ–∞—Ä—Ä–∞—Ä –∫—É–Ω–µ–¥.
API_BASE_URL = os.environ.get("API_BASE_URL", "http://127.0.0.1:5000") + "/api"
#
# =================================================================================

BOT_SESSIONS_FILE = 'bot_sessions.json'
SESSION_LOCK = threading.Lock()

# ... (–ú–∞—Ç–Ω“≥–æ –±–µ —Ç–∞“ì–π–∏—Ä–æ—Ç)
TEXTS = {
    'choose_language': "–ó–∞–±–æ–Ω—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select language:",'welcome': {'tj': "üéâ –•—É—à –æ–º–∞–¥–µ–¥!", 'ru': "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", 'en': "üéâ Welcome!"},'main_menu': {'tj': ["üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", "üõí –°–∞–±–∞–¥", "üìû –¢–∞–º–æ—Å"], 'ru': ["üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", "üõí –ö–æ—Ä–∑–∏–Ω–∞", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"], 'en': ["üõçÔ∏è Catalog", "üõí Cart", "üìû Contact"]},'admin_menu': {'tj': ["‚ûï –ò–ª–æ–≤–∞–∏ –º–∞“≥—Å—É–ª–æ—Ç", "üìÅ –ò–ª–æ–≤–∞–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è", "üìä –û–º–æ—Ä–∏ —Ñ—É—Ä”Ø—à", "üì£ –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ —Ö–∞–±–∞—Ä–Ω–æ–º–∞"], 'ru': ["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", "üìÅ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂", "üì£ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"], 'en': ["‚ûï Add Product", "üìÅ Add Category", "üìä Sales Statistics", "üì£ Send Newsletter"]},'user_menu_for_admin': {'tj': "‚öôÔ∏è –ë–∞ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", 'ru': "‚öôÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", 'en': "‚öôÔ∏è To Admin Panel"},'ask_broadcast_message': {'tj': "–ü–∞—ë–º–µ—Ä–æ, –∫–∏ –±–∞ “≥–∞–º–∞–∏ –∫–æ—Ä–±–∞—Ä–æ–Ω —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω –º–µ—Ö–æ“≥–µ–¥, –Ω–∞–≤–∏—Å–µ–¥ (–º–µ—Ç–∞–≤–æ–Ω–∞–¥ –º–∞—Ç–Ω, –∞–∫—Å –±–æ –º–∞—Ç–Ω –±–æ—à–∞–¥). –ë–∞—Ä–æ–∏ –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω /cancel -—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥.", 'ru': "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–º–æ–∂–Ω–æ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º). –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel.", 'en': "Enter the message to broadcast to all users (can be text, or a photo with caption). Press /cancel to quit."},'broadcast_confirmation': {'tj': "–®—É–º–æ –º—É—Ç–º–∞–∏–Ω “≥–∞—Å—Ç–µ–¥, –∫–∏ –∏–Ω –ø–∞—ë–º—Ä–æ –±–∞ “≥–∞–º–∞–∏ –∫–æ—Ä–±–∞—Ä–æ–Ω –º–µ—Ñ–∏—Ä–∏—Å—Ç–µ–¥?", 'ru': "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?", 'en': "Are you sure you want to send this message to all users?"},'broadcast_started': {'tj': "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ“ì–æ–∑ —à—É–¥. –ò–Ω –º–µ—Ç–∞–≤–æ–Ω–∞–¥ –∫–∞–º–µ –≤–∞“õ—Ç –≥–∏—Ä–∞–¥...", 'ru': "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...", 'en': "‚úÖ Broadcast started. This may take some time..."},'broadcast_report': {'tj': "üìà “≤–∏—Å–æ–±–æ—Ç: –ü–∞—ë–º –±–∞ {} –∞–∑ {} –∫–æ—Ä–±–∞—Ä –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥.", 'ru': "üìà –û—Ç—á–µ—Ç: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {} –∏–∑ {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", 'en': "üìà Report: Message successfully sent to {} out of {} users."},'stats_message': {'tj': "üìä **–û–ú–û–†–ò –£–ú–£–ú–ò–ò –§–£–†”Æ–®**\n\nüí∞ **–î–∞—Ä–æ–º–∞–¥–∏ —É–º—É–º”£:** `{total_revenue}` —Å–æ–º–æ–Ω”£\nüÜï **–§–∞—Ä–º–æ–∏—à“≥–æ–∏ –Ω–∞–≤:** `{new_orders}` –¥–æ–Ω–∞\nüì¶ **“≤–∞–º–∞–≥”£ —Ñ–∞—Ä–º–æ–∏—à“≥–æ:** `{total_orders}` –¥–æ–Ω–∞\nüë§ **–®—É–º–æ—Ä–∞–∏ –º–∏–∑–æ“∑–æ–Ω:** `{total_customers}` –Ω–∞—Ñ–∞—Ä\nüëï **–®—É–º–æ—Ä–∞–∏ –º–∞“≥—Å—É–ª–æ—Ç:** `{total_products}` –¥–æ–Ω–∞", 'ru': "üìä **–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–î–ê–ñ**\n\nüí∞ **–û–±—â–∏–π –¥–æ—Ö–æ–¥:** `{total_revenue}` —Å–æ–º–æ–Ω–∏\nüÜï **–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã:** `{new_orders}` —à—Ç.\nüì¶ **–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:** `{total_orders}` —à—Ç.\nüë§ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤:** `{total_customers}` —á–µ–ª.\nüëï **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤:** `{total_products}` —à—Ç.", 'en': "üìä **OVERALL SALES STATISTICS**\n\nüí∞ **Total Revenue:** `{total_revenue}` TJS\nüÜï **New Orders:** `{new_orders}`\nüì¶ **Total Orders:** `{total_orders}`\nüë§ **Total Customers:** `{total_customers}`\nüëï **Total Products:** `{total_products}`"},'choose_category': {'tj': "–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", 'ru': "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", 'en': "Choose a category:"},'no_products': {'tj': "–î–∞—Ä –∏–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏—è “≥–æ–ª–æ –º–∞“≥—Å—É–ª–æ—Ç –Ω–µ—Å—Ç.", 'ru': "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", 'en': "There are no products in this category yet."},'add_to_cart': {'tj': "üõí –ò–ª–æ–≤–∞ –±–∞ —Å–∞–±–∞–¥", 'ru': "üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", 'en': "üõí Add to Cart"},'enter_quantity': {'tj': "–ú–∏“õ–¥–æ—Ä—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–º–∞—Å–∞–ª–∞–Ω: 1):", 'ru': "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1):", 'en': "Enter quantity (e.g., 1):"},'added_to_cart': {'tj': "‚úÖ –ú–∞“≥—Å—É–ª–æ—Ç –±–∞ —Å–∞–±–∞–¥ –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞ —à—É–¥!", 'ru': "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!", 'en': "‚úÖ Product added to cart!"},'cart_is_empty': {'tj': "üõí –°–∞–±–∞–¥–∏ —à—É–º–æ —Ö–æ–ª”£ –∞—Å—Ç.", 'ru': "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", 'en': "üõí Your cart is empty."},'your_cart': {'tj': "üõí **–°–∞–±–∞–¥–∏ —à—É–º–æ:**", 'ru': "üõí **–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:**", 'en': "üõí **Your cart:**"},'total_price': {'tj': "üí∞ **–ù–∞—Ä—Ö–∏ —É–º—É–º”£:**", 'ru': "üí∞ **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:**", 'en': "üí∞ **Total price:**"},'checkout': {'tj': "‚úÖ –¢–∞—Å–¥–∏“õ–∏ —Ñ–∞—Ä–º–æ–∏—à", 'ru': "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", 'en': "‚úÖ Checkout"},'clear_cart': {'tj': "üóëÔ∏è –¢–æ–∑–∞ –∫–∞—Ä–¥–∞–Ω–∏ —Å–∞–±–∞–¥", 'ru': "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", 'en': "üóëÔ∏è Clear Cart"},'enter_address': {'tj': "üìç –°—É—Ä–æ“ì–∞–∏ —Ö—É–¥—Ä–æ –±–∞—Ä–æ–∏ —Ä–∞—Å–æ–Ω–∏–¥–∞–Ω –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:", 'ru': "üìç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:", 'en': "üìç Please enter your delivery address:"},'enter_phone': {'tj': "üì± –†–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏ —Ö—É–¥—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–º–∞—Å–∞–ª–∞–Ω: +992921234567):", 'ru': "üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +992921234567):", 'en': "üì± Please enter your phone number (e.g., +992921234567):"},'order_confirmed': {'tj': "‚úÖ **–§–∞—Ä–º–æ–∏—à–∏ —à—É–º–æ “õ–∞–±—É–ª —à—É–¥!**\n\n–†–∞“õ–∞–º–∏ —Ñ–∞—Ä–º–æ–∏—à–∏ —à—É–º–æ: **#{}**\n\n–ú–µ–Ω–µ“∑–µ—Ä–∏ –º–æ –±–∞ –Ω–∞–∑–¥–∏–∫”£ –±–æ —à—É–º–æ –¥–∞—Ä —Ç–∞–º–æ—Å —Ö–æ“≥–∞–¥ —à—É–¥.", 'ru': "‚úÖ **–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!**\n\n–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: **#{}**\n\n–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.", 'en': "‚úÖ **Your order has been confirmed!**\n\nYour order number is: **#{}**\n\nOur manager will contact you shortly."},'contact_info': {'tj': "üìû **–ú–∞—ä–ª—É–º–æ—Ç –±–∞—Ä–æ–∏ —Ç–∞–º–æ—Å:**\n\n**–¢–µ–ª–µ—Ñ–æ–Ω:** +992 92 777 77 77\n**Email:** support@istambulwear.tj", 'ru': "üìû **–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n\n**–¢–µ–ª–µ—Ñ–æ–Ω:** +992 92 777 77 77\n**Email:** support@istambulwear.tj", 'en': "üìû **Contact Information:**\n\n**Phone:** +992 92 777 77 77\n**Email:** support@istambulwear.tj"},'back': {'tj': "‚Ü©Ô∏è –ë–∞ “õ–∞—Ñ–æ", 'ru': "‚Ü©Ô∏è –ù–∞–∑–∞–¥", 'en': "‚Ü©Ô∏è Back"},'error_api': {'tj': "üî¥ –•–∞—Ç–æ–≥”£ –¥–∞—Ä –ø–∞–π–≤–∞—Å—Ç—à–∞–≤”£ –±–∞ —Å–µ—Ä–≤–µ—Ä. –õ—É—Ç—Ñ–∞–Ω, –±–æ–≤–∞—Ä”£ “≥–æ—Å–∏–ª –∫—É–Ω–µ–¥, –∫–∏ —Å–µ—Ä–≤–µ—Ä —Ñ–∞—ä–æ–ª –∞—Å—Ç –≤–∞ –∞–∑ –Ω–∞–≤ –∫”Ø—à–∏—à –∫—É–Ω–µ–¥.", 'ru': "üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 'en': "üî¥ Error connecting to the server. Please ensure the server is running and try again."},'new_order_notification': {'tj': ("üö® **–§–ê–†–ú–û–ò–®–ò –ù–ê–í (–∞–∑ –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç)** üö®\n\n"
                                     "**–†–∞“õ–∞–º–∏ —Ñ–∞—Ä–º–æ–∏—à:** `#{order_id}`\n"
                                     "**–ú–∏–∑–æ“∑:** {first_name} (@{username})\n"
                                     "**–¢–µ–ª–µ—Ñ–æ–Ω:** `{phone}`\n"
                                     "**–°—É—Ä–æ“ì–∞:** {address}\n\n"
                                     "--- **–†”Ø–π—Ö–∞—Ç–∏ –º–∞“≥—Å—É–ª–æ—Ç** ---\n{products_list}"
                                     "-------------------------\n\n"
                                     "üí∞ **–ù–∞—Ä—Ö–∏ —É–º—É–º”£: {total_price} —Å–æ–º–æ–Ω”£**")},'add_product_start': {'tj': "–û“ì–æ–∑–∏ –∏–ª–æ–≤–∞–∏ –º–∞“≥—Å—É–ª–æ—Ç–∏ –Ω–∞–≤. –ë–∞—Ä–æ–∏ –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω /cancel -—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥.\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", 'ru': "–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", 'en': "Starting new product addition. Type /cancel to quit.\n\nChoose a category:"},'ask_product_name': {'tj': "–ù–æ–º–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:", 'ru': "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", 'en': "Enter the product name:"},'ask_price': {'tj': "–ù–∞—Ä—Ö–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ –±–æ —Å–æ–º–æ–Ω”£ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–º–∞—Å–∞–ª–∞–Ω: 120.50):", 'ru': "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ–º–æ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 120.50):", 'en': "Enter the product price in Somoni (e.g., 120.50):"},'ask_photo': {'tj': "–ê–∫—Å–∏ –∞—Å–æ—Å–∏–∏ –º–∞“≥—Å—É–ª–æ—Ç—Ä–æ —Ñ–∏—Ä–∏—Å—Ç–µ–¥:", 'ru': "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:", 'en': "Send the main product photo:"},'ask_inventory': {'tj': "–ê–∫–Ω—É–Ω –∞–Ω–¥–æ–∑–∞ –≤–∞ –º–∏“õ–¥–æ—Ä—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥. –ù–∞–º—É–Ω–∞: S 10 (–∞–Ω–¥–æ–∑–∞–∏ S, 10 –¥–æ–Ω–∞). –ü–∞—Å –∞–∑ –∞–Ω“∑–æ–º '—Ç–∞–º–æ–º' –Ω–∞–≤–∏—Å–µ–¥.", 'ru': "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ü—Ä–∏–º–µ—Ä: S 10 (—Ä–∞–∑–º–µ—Ä S, 10 —à—Ç—É–∫). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ'.", 'en': "Now enter size and quantity. Example: S 10 (size S, 10 units). When finished, type 'done'."},'inventory_added': {'tj': "‚úÖ –ê–Ω–¥–æ–∑–∞–∏ '{}' –±–æ –º–∏“õ–¥–æ—Ä–∏ {} –∏–ª–æ–≤–∞ —à—É–¥. –ë–æ–∑ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ —ë '—Ç–∞–º–æ–º' –Ω–∞–≤–∏—Å–µ–¥.", 'ru': "‚úÖ –†–∞–∑–º–µ—Ä '{}' —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º {} –¥–æ–±–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ'.", 'en': "‚úÖ Size '{}' with quantity {} added. Enter more or type 'done'."},'product_added_success': {'tj': "‚úÖ –ú–∞“≥—Å—É–ª–æ—Ç–∏ –Ω–∞–≤ –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –±–∞ –±–∞–∑–∞ –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞ —à—É–¥!", 'ru': "‚úÖ –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É!", 'en': "‚úÖ New product successfully added to the database!"},'operation_cancelled': {'tj': "üö´ –ê–º–∞–ª–∏—ë—Ç –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞ —à—É–¥.", 'ru': "üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", 'en': "üö´ Operation cancelled."},'yes': {'tj': '“≤–∞', 'ru': '–î–∞', 'en': 'Yes'},'no': {'tj': '–ù–µ', 'ru': '–ù–µ—Ç', 'en': 'No'},'add_category_start': {'tj': "–ù–æ–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–∏ –Ω–∞–≤—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–º–∞—Å–∞–ª–∞–Ω: –ö—É—Ä—Ç–∞“≥–æ). –ë–∞—Ä–æ–∏ –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω /cancel -—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥.", 'ru': "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –†—É–±–∞—à–∫–∏). –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel.", 'en': "Enter the new category name (e.g., Shirts). Press /cancel to quit."},'category_added_success': {'tj': "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è–∏ '{}' –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞ —à—É–¥!", 'ru': "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", 'en': "‚úÖ Category '{}' successfully added!"},'category_add_failed': {'tj': "üî¥ –•–∞—Ç–æ–≥”£! –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–æ–≤–∞ –Ω–∞—à—É–¥. –≠“≥—Ç–∏–º–æ–ª, —á—É–Ω–∏–Ω –Ω–æ–º –∞–ª–ª–∞–∫–∞–π –º–∞–≤“∑—É–¥ –∞—Å—Ç —ë —Ö–∞—Ç–æ–≥–∏–∏ —Å–µ—Ä–≤–µ—Ä —Ä—É—Ö –¥–æ–¥.", 'ru': "üî¥ –û—à–∏–±–∫–∞! –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–æ–µ –∏–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.", 'en': "üî¥ Error! Category not added. The name might already exist, or a server error occurred."}}

# --- “≤–û–õ–ê–¢“≤–û–ò –°–£“≤–ë–ê–¢ ---
(SELECTING_LANGUAGE, MAIN_MENU, ADMIN_MENU,
 ADD_PRODUCT_CAT, ADD_PRODUCT_NAME, ADD_PRODUCT_PRICE, ADD_PRODUCT_PHOTO, ADD_PRODUCT_INVENTORY,
 ADD_CATEGORY_NAME, 
 SHOWING_CATEGORIES, SHOWING_PRODUCTS, ADDING_TO_CART_QUANTITY,
 CHECKOUT_ADDRESS, CHECKOUT_PHONE, BROADCAST_MESSAGE, BROADCAST_CONFIRM) = range(16)

# ... (–§—É–Ω–∫—Å–∏—è“≥–æ–∏ —ë—Ä–∏—Ä–∞—Å–æ–Ω –±–µ —Ç–∞“ì–π–∏—Ä–æ—Ç)
def load_bot_sessions():
    with SESSION_LOCK:
        if not os.path.exists(BOT_SESSIONS_FILE): return {}
        try:
            with open(BOT_SESSIONS_FILE, 'r', encoding='utf-8') as f: return json.load(f)
        except (json.JSONDecodeError, FileNotFoundError): return {}
def save_bot_sessions(data):
    with SESSION_LOCK:
        with open(BOT_SESSIONS_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
def get_user_lang(context: CallbackContext):
    return context.user_data.get('lang', 'tj')
def get_text(key, lang, *args, **kwargs):
    node = TEXTS.get(key, {})
    template = node.get(lang, f"_{key}_") if isinstance(node, dict) else node
    try:
        return template.format(*args, **kwargs)
    except (KeyError, IndexError):
        return template
def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_TELEGRAM_ID
def notify_admin_new_order(context: CallbackContext, order_details: dict):
    try:
        user = order_details['user']
        products_list_text = "".join([f"  - {item['name']} (x{item['quantity']}) - {item['price']:.2f} —Å–æ–º–æ–Ω”£\n" for item in order_details['cart_details']])
        notification_text = get_text('new_order_notification', 'tj',
                                     order_id=order_details.get('id', 'N/A'),
                                     first_name=user.first_name, username=user.username or 'N/A',
                                     phone=order_details['phone'], address=order_details['address'],
                                     products_list=products_list_text, total_price=f"{order_details['total']:.2f}")
        context.bot.send_message(chat_id=ADMIN_TELEGRAM_ID, text=notification_text, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –æ–≥–æ“≥–∏–Ω–æ–º–∞ –±–∞ –∞–¥–º–∏–Ω: {e}")

# ... (–û“ì–æ–∑–∏ –∫–æ—Ä –≤–∞ –º–µ–Ω—é“≥–æ –±–µ —Ç–∞“ì–π–∏—Ä–æ—Ç)
def start(update: Update, context: CallbackContext) -> int:
    user_id = str(update.message.from_user.id)
    sessions = load_bot_sessions()
    if user_id not in sessions:
        sessions[user_id] = {'lang': 'tj', 'cart': []}
        save_bot_sessions(sessions)
    buttons = [KeyboardButton("üáπüáØ –¢–æ“∑–∏–∫”£"), KeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π"), KeyboardButton("üá¨üáß English")]
    reply_markup = ReplyKeyboardMarkup([buttons], resize_keyboard=True, one_time_keyboard=True)
    update.message.reply_text(TEXTS['choose_language'], reply_markup=reply_markup)
    return SELECTING_LANGUAGE
def set_language(update: Update, context: CallbackContext) -> int:
    lang_map = {"üáπüáØ –¢–æ“∑–∏–∫”£": "tj", "üá∑üá∫ –†—É—Å—Å–∫–∏–π": "ru", "üá¨üáß English": "en"}
    lang = lang_map.get(update.message.text)
    if not lang: return start(update, context)
    context.user_data['lang'] = lang
    sessions, user_id = load_bot_sessions(), str(update.message.from_user.id)
    if user_id in sessions:
        sessions[user_id]['lang'] = lang
        save_bot_sessions(sessions)
    if is_admin(update.message.from_user.id): return show_admin_menu(update, context)
    return show_main_menu(update, context)
def show_main_menu(update: Update, context: CallbackContext) -> int:
    lang = get_user_lang(context)
    buttons_text = TEXTS['main_menu'][lang]
    buttons = [[KeyboardButton(b) for b in buttons_text]]
    if is_admin(update.effective_user.id):
        buttons.append([KeyboardButton(get_text('user_menu_for_admin', lang))])
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    if update.callback_query:
        update.callback_query.answer()
        message = update.callback_query.message
        try: message.delete()
        except Exception as e: logger.info(f"–ü–∞—ë–º–∏ –ø–µ—à–∏–Ω–∞ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞ –Ω–∞—à—É–¥: {e}")
        context.bot.send_message(chat_id=message.chat_id, text=get_text('welcome', lang), reply_markup=reply_markup)
    elif update.message:
        update.message.reply_text(get_text('welcome', lang), reply_markup=reply_markup)
    return MAIN_MENU
def show_admin_menu(update: Update, context: CallbackContext) -> int:
    lang = get_user_lang(context)
    buttons_text = TEXTS['admin_menu'][lang]
    buttons = [[KeyboardButton(buttons_text[0]), KeyboardButton(buttons_text[1])], [KeyboardButton(buttons_text[2]), KeyboardButton(buttons_text[3])]]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    update.message.reply_text("‚öôÔ∏è –ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", reply_markup=reply_markup)
    return ADMIN_MENU
def handle_main_menu_choice(update: Update, context: CallbackContext) -> int:
    lang, text = get_user_lang(context), update.message.text
    menu_options = TEXTS['main_menu'][lang]
    if is_admin(update.effective_user.id) and text == get_text('user_menu_for_admin', lang): return show_admin_menu(update, context)
    if text == menu_options[0]: return show_categories(update, context)
    if text == menu_options[1]: return show_cart(update, context)
    if text == menu_options[2]: return contact_us(update, context)
    return MAIN_MENU
def handle_admin_menu_choice(update: Update, context: CallbackContext) -> int:
    lang, text = get_user_lang(context), update.message.text
    menu_options = TEXTS['admin_menu'][lang]
    if text == menu_options[0]: return add_product_start(update, context)
    if text == menu_options[1]: return add_category_start(update, context)
    if text == menu_options[2]: return show_statistics(update, context)
    if text == menu_options[3]: return broadcast_start(update, context)
    return ADMIN_MENU
def cancel_operation(update: Update, context: CallbackContext) -> int:
    lang = get_user_lang(context)
    keys_to_clear = [k for k in context.user_data if k.startswith('new_') or k.startswith('broadcast_')]
    for key in keys_to_clear:
        if 'photo_path' in context.user_data.get(key, {}) and os.path.exists(context.user_data[key]['photo_path']):
            os.remove(context.user_data[key]['photo_path'])
        del context.user_data[key]
    update.message.reply_text(get_text('operation_cancelled', lang))
    if is_admin(update.effective_user.id): return show_admin_menu(update, context)
    return show_main_menu(update, context)

# ... (–§—É–Ω–∫—Å–∏—è“≥–æ–∏ –∞–¥–º–∏–Ω –±–µ —Ç–∞“ì–π–∏—Ä–æ—Ç)
def show_statistics(update: Update, context: CallbackContext) -> int:
    lang = get_user_lang(context)
    try:
        response = requests.get(f"{API_BASE_URL}/admin/stats")
        response.raise_for_status()
        stats = response.json()
        message = get_text('stats_message', lang, **stats)
        update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
    except requests.RequestException as e:
        logger.error(f"–•–∞—Ç–æ–≥–∏–∏ API “≥–∞–Ω–≥–æ–º–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –æ–º–æ—Ä: {e}")
        update.message.reply_text(get_text('error_api', lang))
    return ADMIN_MENU
def broadcast_start(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(get_text('ask_broadcast_message', get_user_lang(context)))
    return BROADCAST_MESSAGE
def broadcast_get_message(update: Update, context: CallbackContext) -> int:
    lang = get_user_lang(context)
    context.user_data['broadcast_message_id'] = update.message.message_id
    context.user_data['broadcast_chat_id'] = update.message.chat_id
    buttons = [[InlineKeyboardButton(get_text('yes', lang), callback_data='broadcast_yes'), InlineKeyboardButton(get_text('no', lang), callback_data='broadcast_no')]]
    reply_markup = InlineKeyboardMarkup(buttons)
    update.message.reply_text(get_text('broadcast_confirmation', lang), reply_markup=reply_markup)
    return BROADCAST_CONFIRM
def broadcast_confirm(update: Update, context: CallbackContext) -> int:
    query, lang = update.callback_query, get_user_lang(context)
    query.answer()
    if query.data == 'broadcast_no':
        for key in ['broadcast_message_id', 'broadcast_chat_id']: context.user_data.pop(key, None)
        query.edit_message_text(get_text('operation_cancelled', lang))
        return ADMIN_MENU
    query.edit_message_text(get_text('broadcast_started', lang))
    message_id, chat_id = context.user_data.pop('broadcast_message_id'), context.user_data.pop('broadcast_chat_id')
    user_ids = list(load_bot_sessions().keys())
    success_count = 0
    for user_id in user_ids:
        try:
            context.bot.copy_message(chat_id=int(user_id), from_chat_id=chat_id, message_id=message_id)
            success_count += 1
            time.sleep(0.1)
        except Exception as e:
            logger.warning(f"–ü–∞—ë–º –±–∞ –∫–æ—Ä–±–∞—Ä–∏ {user_id} —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ –Ω–∞—à—É–¥: {e}")
    context.bot.send_message(chat_id=ADMIN_TELEGRAM_ID, text=get_text('broadcast_report', lang, success_count, len(user_ids)))
    return ADMIN_MENU
def add_category_start(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(get_text('add_category_start', get_user_lang(context)))
    return ADD_CATEGORY_NAME
def add_category_get_name(update: Update, context: CallbackContext) -> int:
    lang, category_name = get_user_lang(context), update.message.text.strip()
    if not category_name:
        update.message.reply_text("–ù–æ–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–º–µ—Ç–∞–≤–æ–Ω–∞–¥ —Ö–æ–ª”£ –±–æ—à–∞–¥.")
        return ADD_CATEGORY_NAME
    try:
        response = requests.post(f"{API_BASE_URL}/admin/categories", json={'name': category_name})
        if response.status_code == 201:
            update.message.reply_text(get_text('category_added_success', lang, category_name))
        else:
            logger.error(f"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –∏–ª–æ–≤–∞–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {response.status_code} - {response.text}")
            update.message.reply_text(get_text('category_add_failed', lang))
    except requests.RequestException as e:
        logger.error(f"–•–∞—Ç–æ–≥–∏–∏ API: {e}")
        update.message.reply_text(get_text('error_api', lang))
    return show_admin_menu(update, context)
def add_product_start(update: Update, context: CallbackContext) -> int:
    lang = get_user_lang(context)
    context.user_data['new_product'] = {}
    try:
        response = requests.get(f"{API_BASE_URL}/bot/categories", timeout=5)
        response.raise_for_status()
        categories = response.json()
        if not categories:
            update.message.reply_text("–ê–≤–≤–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–æ–≤–∞ –∫—É–Ω–µ–¥.")
            return ADMIN_MENU
        
        buttons = []
        for cat in categories:
            # --- –ò–°–õ–û“≤–ò –•–ê–¢–û–ì–ò–ò "can't find field 'text'" ---
            # –ê–≤–≤–∞–ª –Ω–æ–º—Ä–æ –∞–∑ –ø–æ–ª–µ–∏ –Ω–∞–≤ (name_tj) –º–µ–≥–∏—Ä–µ–º, –∞–≥–∞—Ä –Ω–∞–±–æ—à–∞–¥, –∞–∑ –ø–æ–ª–µ–∏ –∫”Ø“≥–Ω–∞ (name)
            category_name = cat.get(f'name_{lang}') or cat.get('name')
            if category_name:
                buttons.append(InlineKeyboardButton(text=category_name, callback_data=f"addprod_cat_{cat.get('id')}"))

        if not buttons:
            update.message.reply_text("–Ø–≥–æ–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏—è–∏ –¥—É—Ä—É—Å—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥.")
            return ADMIN_MENU

        reply_markup = InlineKeyboardMarkup.from_column(buttons)
        update.message.reply_text(get_text('add_product_start', lang), reply_markup=reply_markup)
        return ADD_PRODUCT_CAT
    except requests.exceptions.RequestException as e:
        logger.error(f"–•–∞—Ç–æ–≥–∏–∏ API: {e}")
        update.message.reply_text(get_text('error_api', lang))
        return ADMIN_MENU

def add_product_get_category(update: Update, context: CallbackContext) -> int:
    query, lang = update.callback_query, get_user_lang(context)
    query.answer()
    category_id = query.data.split('_')[-1]
    try:
        response = requests.get(f"{API_BASE_URL}/bot/categories", timeout=5)
        response.raise_for_status()
        category = next((c for c in response.json() if c['id'] == category_id), None)
        if not category:
             query.edit_message_text("–•–∞—Ç–æ–≥”£: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —ë—Ñ—Ç –Ω–∞—à—É–¥.")
             return cancel_operation(update, context)
        # --- –ò–°–õ–û“≤–ò –•–ê–¢–û–ì”¢ ---
        # –ù–æ–º—Ä–æ –∞–∑ –ø–æ–ª–µ–∏ –Ω–∞–≤ —ë –∫”Ø“≥–Ω–∞ –º–µ–≥–∏—Ä–µ–º
        context.user_data['new_product']['category'] = category.get(f'name_{lang}') or category.get('name_tj') or category.get('name')
    except requests.exceptions.RequestException as e:
        logger.error(f"–•–∞—Ç–æ–≥–∏–∏ API: {e}")
        query.edit_message_text(get_text('error_api', lang))
        return cancel_operation(update, context)
    query.edit_message_text(get_text('ask_product_name', lang))
    return ADD_PRODUCT_NAME
def add_product_get_name(update: Update, context: CallbackContext) -> int:
    product_name = update.message.text
    context.user_data['new_product']['name'] = product_name
    context.user_data['new_product']['name_tj'] = product_name
    context.user_data['new_product']['name_ru'] = product_name
    context.user_data['new_product']['name_en'] = product_name
    context.user_data['new_product']['description'] = product_name
    context.user_data['new_product']['description_tj'] = product_name
    context.user_data['new_product']['description_ru'] = product_name
    context.user_data['new_product']['description_en'] = product_name
    update.message.reply_text(get_text('ask_price', get_user_lang(context)))
    return ADD_PRODUCT_PRICE
def add_product_get_price(update: Update, context: CallbackContext) -> int:
    try:
        context.user_data['new_product']['price'] = float(update.message.text.replace(',', '.'))
        update.message.reply_text(get_text('ask_photo', get_user_lang(context)))
        return ADD_PRODUCT_PHOTO
    except ValueError:
        update.message.reply_text("–ù–∞—Ä—Ö—Ä–æ –¥–∞—Ä —Ñ–æ—Ä–º–∞—Ç–∏ —Ä–∞“õ–∞–º”£ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.")
        return ADD_PRODUCT_PRICE
def add_product_get_photo(update: Update, context: CallbackContext) -> int:
    if not update.message.photo:
        update.message.reply_text("–õ—É—Ç—Ñ–∞–Ω –∞–∫—Å —Ñ–∏—Ä–∏—Å—Ç–µ–¥.")
        return ADD_PRODUCT_PHOTO
    photo_file = update.message.photo[-1].get_file()
    os.makedirs('temp_uploads', exist_ok=True)
    file_path = os.path.join('temp_uploads', f"{photo_file.file_id}.jpg")
    photo_file.download(custom_path=file_path)
    context.user_data['new_product']['photo_path'] = file_path
    context.user_data['new_product']['inventory'] = []
    update.message.reply_text(get_text('ask_inventory', get_user_lang(context)))
    return ADD_PRODUCT_INVENTORY
def add_product_get_inventory(update: Update, context: CallbackContext) -> int:
    lang, text = get_user_lang(context), update.message.text.lower().strip()
    if text in ['—Ç–∞–º–æ–º', '–≥–æ—Ç–æ–≤–æ', 'done']: return add_product_confirm_and_send(update, context)
    try:
        size, quantity = text.split()
        context.user_data['new_product']['inventory'].append({"size": size.upper(), "quantity": int(quantity)})
        update.message.reply_text(get_text('inventory_added', lang, size.upper(), int(quantity)))
    except (ValueError, IndexError):
        update.message.reply_text("–§–æ—Ä–º–∞—Ç–∏ –Ω–æ–¥—É—Ä—É—Å—Ç. –ù–∞–º—É–Ω–∞: M 5")
    return ADD_PRODUCT_INVENTORY
def add_product_confirm_and_send(update: Update, context: CallbackContext):
    lang = get_user_lang(context)
    product_data = context.user_data.pop('new_product', None)
    if not product_data or 'photo_path' not in product_data:
        return cancel_operation(update, context)
    # --- –ò–°–õ–û“≤: “≤–∞–º–∞–∏ –ø–æ–ª–µ“≥–æ–∏ –Ω–æ–º—Ä–æ –º–µ—Ñ–∏—Ä–∏—Å—Ç–µ–º ---
    form_payload = {
        'category': product_data['category'], 
        'name': product_data['name'],
        'name_tj': product_data['name_tj'],
        'name_ru': product_data['name_ru'],
        'name_en': product_data['name_en'],
        'description': product_data['description'],
        'description_tj': product_data['description_tj'],
        'description_ru': product_data['description_ru'],
        'description_en': product_data['description_en'],
        'price': product_data['price'], 
        'inventory': json.dumps(product_data['inventory'])
    }
    photo_path = product_data['photo_path']
    try:
        with open(photo_path, 'rb') as photo_file:
            files = {'image': (os.path.basename(photo_path), photo_file, 'image/jpeg')}
            response = requests.post(f"{API_BASE_URL}/admin/products", data=form_payload, files=files, timeout=10)
            response.raise_for_status()
        update.message.reply_text(get_text('product_added_success', lang))
    except requests.exceptions.RequestException as e:
        logger.error(f"–•–∞—Ç–æ–≥–∏–∏ API: {e}")
        error_text = e.response.text if e.response else '–°–µ—Ä–≤–µ—Ä “∑–∞–≤–æ–± –Ω–∞–¥–æ–¥'
        update.message.reply_text(f"üî¥ –•–∞—Ç–æ–≥”£ –¥–∞—Ä —Å–µ—Ä–≤–µ—Ä: {error_text}")
    finally:
        if os.path.exists(photo_path): os.remove(photo_path)
    return show_admin_menu(update, context)

def show_categories(update: Update, context: CallbackContext) -> int:
    lang = get_user_lang(context)
    try:
        response = requests.get(f"{API_BASE_URL}/bot/categories", timeout=5)
        response.raise_for_status()
        categories = response.json()
        if not categories:
            update.message.reply_text(get_text('no_products', lang))
            return MAIN_MENU
        
        buttons = []
        for cat in categories:
            # --- –ò–°–õ–û“≤–ò –•–ê–¢–û–ì–ò–ò "can't find field 'text'" ---
            # –ê–≤–≤–∞–ª –Ω–æ–º—Ä–æ –∞–∑ –ø–æ–ª–µ–∏ –Ω–∞–≤ (name_tj) –º–µ–≥–∏—Ä–µ–º, –∞–≥–∞—Ä –Ω–∞–±–æ—à–∞–¥, –∞–∑ –ø–æ–ª–µ–∏ –∫”Ø“≥–Ω–∞ (name)
            category_name = cat.get(f'name_{lang}') or cat.get('name')
            if category_name:
                buttons.append(InlineKeyboardButton(text=category_name, callback_data=f"cat_{cat.get('id')}"))

        if not buttons:
            update.message.reply_text("–Ø–≥–æ–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏—è–∏ –¥—É—Ä—É—Å—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥.")
            return MAIN_MENU

        reply_markup = InlineKeyboardMarkup.from_column(buttons)
        update.message.reply_text(get_text('choose_category', lang), reply_markup=reply_markup)
        return SHOWING_CATEGORIES
    except requests.exceptions.RequestException as e:
        logger.error(f"–•–∞—Ç–æ–≥–∏–∏ API: {e}")
        update.message.reply_text(get_text('error_api', lang))
        return MAIN_MENU

def show_products(update: Update, context: CallbackContext) -> int:
    query, lang = update.callback_query, get_user_lang(context)
    query.answer()
    category_id = query.data.split('_', 1)[1]
    try:
        response = requests.get(f"{API_BASE_URL}/bot/products?category_id={category_id}", timeout=5)
        response.raise_for_status()
        products = response.json()
        if not products:
            query.message.reply_text(get_text('no_products', lang))
            return SHOWING_CATEGORIES
        for product in products:
            # --- –ò–°–õ–û“≤: –ò—Å—Ç–∏—Ñ–æ–¥–∞–∏ –Ω–æ–º–∏ –º—É–≤–æ—Ñ–∏“õ ---
            product_name = product.get(f'name_{lang}') or product.get('name_tj')
            caption = f"**{product_name}**\n\n**–ù–∞—Ä—Ö:** {product.get('price')} —Å–æ–º–æ–Ω”£"
            buttons = [InlineKeyboardButton(get_text('add_to_cart', lang), callback_data=f"add_{product.get('id')}")]
            reply_markup = InlineKeyboardMarkup([buttons])
            image_url = product.get('image_url', 'https://placehold.co/600x400?text=No+Image')
            try:
                query.message.reply_photo(photo=image_url, caption=caption, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
            except Exception as e:
                logger.error(f"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –∞–∫—Å ({image_url}): {e}")
                error_text = f"–•–∞—Ç–æ–≥”£ –¥–∞—Ä –Ω–∏—à–æ–Ω –¥–æ–¥–∞–Ω–∏ –∞–∫—Å–∏ '{product_name}'."
                if '127.0.0.1' in image_url: error_text += "\n\n**–°–∞–±–∞–±:** –°–µ—Ä–≤–µ—Ä –±–æ—è–¥ –¥–∞—Ä —Ö–æ—Å—Ç–∏–Ω–≥–∏ –æ–Ω–ª–∞–π–Ω –±–æ—à–∞–¥."
                query.message.reply_text(f"{error_text}\n\n{caption}", parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
        return SHOWING_PRODUCTS
    except requests.exceptions.RequestException as e:
        logger.error(f"–•–∞—Ç–æ–≥–∏–∏ API: {e}")
        query.message.reply_text(get_text('error_api', lang))
        return SHOWING_CATEGORIES
def add_to_cart_start(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    context.user_data['current_product_id'] = int(query.data.split('_')[1])
    query.message.reply_text(get_text('enter_quantity', get_user_lang(context)))
    return ADDING_TO_CART_QUANTITY
def add_to_cart_quantity(update: Update, context: CallbackContext) -> int:
    try:
        quantity = int(update.message.text)
        if quantity <= 0: raise ValueError
    except (ValueError, TypeError):
        update.message.reply_text("–õ—É—Ç—Ñ–∞–Ω —Ä–∞“õ–∞–º–∏ –¥—É—Ä—É—Å—Ç –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.")
        return ADDING_TO_CART_QUANTITY
    product_id, user_id = context.user_data.pop('current_product_id', None), str(update.message.from_user.id)
    if not product_id: return show_main_menu(update, context)
    sessions = load_bot_sessions()
    user_cart = sessions.setdefault(user_id, {'lang': get_user_lang(context), 'cart': []}).setdefault('cart', [])
    item = next((item for item in user_cart if item.get('id') == product_id), None)
    if item: item['quantity'] += quantity
    else: user_cart.append({'id': product_id, 'quantity': quantity})
    save_bot_sessions(sessions)
    update.message.reply_text(get_text('added_to_cart', get_user_lang(context)))
    return show_main_menu(update, context)
def show_cart(update: Update, context: CallbackContext) -> int:
    user_id, lang = str(update.message.from_user.id), get_user_lang(context)
    user_cart = load_bot_sessions().get(user_id, {}).get('cart', [])
    if not user_cart:
        update.message.reply_text(get_text('cart_is_empty', lang))
        return MAIN_MENU
    try:
        response = requests.get(f"{API_BASE_URL}/bot/products", timeout=5)
        response.raise_for_status()
        all_products = {p['id']: p for p in response.json()}
    except requests.exceptions.RequestException as e:
        logger.error(f"–•–∞—Ç–æ–≥–∏–∏ API: {e}")
        update.message.reply_text(get_text('error_api', lang))
        return MAIN_MENU
    cart_text, total_price = get_text('your_cart', lang) + "\n\n", 0
    for i, item in enumerate(user_cart, 1):
        product = all_products.get(item.get('id'))
        if product:
            price = float(product.get('price', 0)) * item.get('quantity', 0)
            total_price += price
            product_name = product.get(f'name_{lang}') or product.get('name_tj')
            cart_text += f"{i}. {product_name} (x{item.get('quantity')}) - **{price:.2f} —Å–æ–º–æ–Ω”£**\n"
    cart_text += f"\n{get_text('total_price', lang)} **{total_price:.2f} —Å–æ–º–æ–Ω”£**"
    buttons = [[InlineKeyboardButton(get_text('checkout', lang), callback_data='checkout'), InlineKeyboardButton(get_text('clear_cart', lang), callback_data='clear_cart')], [InlineKeyboardButton(get_text('back', lang), callback_data='back_to_menu')]]
    reply_markup = InlineKeyboardMarkup(buttons)
    update.message.reply_text(cart_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    return SHOWING_PRODUCTS
def handle_cart_actions(update: Update, context: CallbackContext) -> int:
    query, user_id, lang = update.callback_query, str(update.callback_query.from_user.id), get_user_lang(context)
    query.answer()
    if query.data == 'clear_cart':
        sessions = load_bot_sessions()
        if user_id in sessions: sessions[user_id]['cart'] = []
        save_bot_sessions(sessions)
        query.edit_message_text(get_text('cart_is_empty', lang))
        return show_main_menu(update, context)
    if query.data == 'checkout':
        query.edit_message_text(get_text('enter_address', lang))
        return CHECKOUT_ADDRESS
    if query.data == 'back_to_menu':
        return show_main_menu(update, context)
    return SHOWING_PRODUCTS
def get_address(update: Update, context: CallbackContext) -> int:
    context.user_data['address'] = update.message.text
    update.message.reply_text(get_text('enter_phone', get_user_lang(context)))
    return CHECKOUT_PHONE
def get_phone_and_confirm(update: Update, context: CallbackContext) -> int:
    user, user_id_str, lang = update.message.from_user, str(update.message.from_user.id), get_user_lang(context)
    user_cart = load_bot_sessions().get(user_id_str, {}).get('cart', [])
    if not user_cart:
        update.message.reply_text(get_text('cart_is_empty', lang))
        return show_main_menu(update, context)
    try:
        response = requests.get(f"{API_BASE_URL}/bot/products", timeout=5)
        response.raise_for_status()
        all_products = {p['id']: p for p in response.json()}
        cart_details = []
        total_price = 0
        for item in user_cart:
            product = all_products.get(item['id'])
            if product:
                price = float(product.get('price', 0)) * item.get('quantity', 0)
                total_price += price
                product_name = product.get(f'name_{lang}') or product.get('name_tj')
                cart_details.append({'name': product_name, 'quantity': item['quantity'], 'price': price})
    except requests.exceptions.RequestException as e:
        logger.error(f"–•–∞—Ç–æ–≥–∏–∏ API: {e}")
        update.message.reply_text(get_text('error_api', lang))
        return show_main_menu(update, context)
    order_data = {"userId": user_id_str, "userName": user.full_name, "address": context.user_data.pop('address', '–ù–æ–º–∞—ä–ª—É–º'), "phone": update.message.text, "cart": user_cart, "total": total_price}
    try:
        response = requests.post(f"{API_BASE_URL}/orders", json=order_data, timeout=10)
        response.raise_for_status()
        order_id = response.json().get('order_id', 'N/A')
        sessions = load_bot_sessions()
        sessions[user_id_str]['cart'] = []
        save_bot_sessions(sessions)
        update.message.reply_text(get_text('order_confirmed', lang, order_id), parse_mode=ParseMode.MARKDOWN)
        notify_admin_new_order(context, {**order_data, 'id': order_id, 'user': user, 'cart_details': cart_details})
    except requests.exceptions.RequestException as e:
        logger.error(f"–•–∞—Ç–æ–≥–∏–∏ API “≥–∞–Ω–≥–æ–º–∏ —Å–æ—Ö—Ç–∞–Ω–∏ —Ñ–∞—Ä–º–æ–∏—à: {e}")
        update.message.reply_text(f"üî¥ –•–∞—Ç–æ–≥”£: {e.response.json().get('error', '–§–∞—Ä–º–æ–∏—à “õ–∞–±—É–ª –Ω–∞—à—É–¥.')}" if e.response else get_text('error_api', lang))
    return show_main_menu(update, context)
def contact_us(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(get_text('contact_info', get_user_lang(context)), parse_mode=ParseMode.MARKDOWN)
    return MAIN_MENU
def main() -> None:
    # –¢–∞—Ñ—Ç–∏—à –º–µ–∫—É–Ω–µ–º, –∫–∏ –æ—ë BOT_TOKEN –∞–∑ –º—É“≥–∏—Ç–∏ —Å–∏—Å—Ç–µ–º–∞ –≥–∏—Ä–∏—Ñ—Ç–∞ —à—É–¥–∞–∞—Å—Ç
    if not BOT_TOKEN:
        logger.critical("!!! –•–ê–¢–û–ì–ò–ò –ö–†–ò–¢–ò–ö”¢: BOT_TOKEN –¥–∞—Ä –º—É“≥–∏—Ç–∏ —Å–∏—Å—Ç–µ–º–∞ —ë—Ñ—Ç –Ω–∞—à—É–¥!")
        logger.critical("–õ—É—Ç—Ñ–∞–Ω, –æ–Ω—Ä–æ –¥–∞—Ä —Ç–∞–Ω–∑–∏–º–æ—Ç–∏ —Ö–æ—Å—Ç–∏–Ω–≥–∏ —Ö—É–¥ “≥–∞–º—á—É–Ω 'Environment Variable' –∏–ª–æ–≤–∞ –∫—É–Ω–µ–¥.")
        return
        
    if not os.path.exists(BOT_SESSIONS_FILE):
        with open(BOT_SESSIONS_FILE, 'w', encoding='utf-8') as f: json.dump({}, f)
        
    updater = Updater(BOT_TOKEN, use_context=True)
    dispatcher = updater.dispatcher
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECTING_LANGUAGE: [MessageHandler(Filters.regex('^(üáπüáØ –¢–æ“∑–∏–∫”£|üá∑üá∫ –†—É—Å—Å–∫–∏–π|üá¨üáß English)$'), set_language)],
            MAIN_MENU: [MessageHandler(Filters.text & ~Filters.command, handle_main_menu_choice)],
            ADMIN_MENU: [MessageHandler(Filters.text & ~Filters.command, handle_admin_menu_choice)],
            ADD_CATEGORY_NAME: [MessageHandler(Filters.text & ~Filters.command, add_category_get_name)],
            ADD_PRODUCT_CAT: [CallbackQueryHandler(add_product_get_category, pattern='^addprod_cat_')],
            ADD_PRODUCT_NAME: [MessageHandler(Filters.text & ~Filters.command, add_product_get_name)],
            ADD_PRODUCT_PRICE: [MessageHandler(Filters.text & ~Filters.command, add_product_get_price)],
            ADD_PRODUCT_PHOTO: [MessageHandler(Filters.photo, add_product_get_photo)],
            ADD_PRODUCT_INVENTORY: [MessageHandler(Filters.text & ~Filters.command, add_product_get_inventory)],
            BROADCAST_MESSAGE: [MessageHandler(Filters.all & ~Filters.command, broadcast_get_message)],
            BROADCAST_CONFIRM: [CallbackQueryHandler(broadcast_confirm, pattern='^broadcast_')],
            SHOWING_CATEGORIES: [CallbackQueryHandler(show_products, pattern='^cat_')],
            SHOWING_PRODUCTS: [CallbackQueryHandler(add_to_cart_start, pattern='^add_'), CallbackQueryHandler(handle_cart_actions, pattern='^(checkout|clear_cart|back_to_menu)$')],
            ADDING_TO_CART_QUANTITY: [MessageHandler(Filters.text & ~Filters.command, add_to_cart_quantity)],
            CHECKOUT_ADDRESS: [MessageHandler(Filters.text & ~Filters.command, get_address)],
            CHECKOUT_PHONE: [MessageHandler(Filters.text & ~Filters.command, get_phone_and_confirm)],
        },
        fallbacks=[CommandHandler('cancel', cancel_operation), CommandHandler('start', start)],
        name="main_conversation", per_user=True, per_message=False,
    )
    dispatcher.add_handler(conv_handler)
    logger.info("–ë–æ—Ç –±–∞ –∫–æ—Ä –æ“ì–æ–∑ –º–µ–∫—É–Ω–∞–¥...")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
